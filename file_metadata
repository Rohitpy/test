import json
2
import os
* login.py
* decryption_v2.py
from Idap? import Server, Connection, ALL, SUBTREE, ALL ATTRIBUTES
4
5
6
7
•8
9
10
11
12
13
14
15
from decryption_v2 import decrypt_message from datetime import timedelta from datetime import datetime print(f"LOG : {datetime.now()} : "
', end - " || *)
with open(' encrypted_password. txt', 'r') as f:
eng_pass - f.read()
• Type here to search
• 118
trontena_vus
Idap3_cron.py 1 x
08
(1 05812550json
= encrypted password.trt

def
get _group_names (list_groups):

new_1s-[]
16
for name in list _groups:
17
new_ls. append (name-split(',')[0][3:])
18
return new_ls
19

20
def Idap_group_user_export (path_ad_groups, path) :
21
with open(path_ad_groups) as f:
22
ad_groups = json. load (f)
23
search_filter='(|'
24
for group in ad_groups.values():
25

26
search_filter+-*)*
27

28
# print (search_filter)
29
server- Server (server, use_ssl-Tnue.get_info=ALL)
30

31
conn. bind()
32
# print (conn. bindo))
0041
140

search_filter+=f' (memberof=CN={group}, OU-SA, OU-HBEU Application Groups, OU-HBEU Applications, DC-HBEU, DC-ADROOT, DC-HSBC) *
conn=Connection (server, user-'CN-SA-SVC-DATALAKEPROD, OU-DataLakePROD, OU-UNIX Service Accounts, OU-SA_All, OU-SA, OU-HBEU_GLOBAL, OU-Unix, DC-HBEU,DC-ADROOT DC-HSBC', password=decrypt _message(encrypted_b64-enc_pass,password='test12345*), auto_bind=True)
conn. search(
34
search_base='DC-HBEU, DC=ADROOT, DC=HSBC' ,
35
search_filter-search_filter, 36
search_scope-SUBTREE,
37
# attributes=ALL_ATTRIBUTES
38
attributes=[' cn', mail', 'sAMAccountName', ' memberOf' ]
39
40
41
42
output_dir-path + '/user_jsons' 43
os- makedirs(outputydir, exist_ok-True)
44
45
46
47
48
49
50
print(f"Entiries created or refreshed : {len(conn.entries)}")
for entry in conn.entries:
# breakpoint
user_info - entry-entry_attributes_as_dict user_id-user_info['SAMAccountName' 1[®]
51
52
53
54
55
56
user_data=f
"name'suser_infol'cn*1 [0],
'email':user_infol'mail ][0],
userid':user_id,
"memberof': get _group_names (user_infol'memberof'])
57
58
59
60
61
output_file = os. path. join(output _dir, f' (user_id}-json* )
with open(output_file, 'w') as outfile:
json.dump (user_data,outfile, indent=4)
