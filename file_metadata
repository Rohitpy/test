import reguests
4
from datetime import datetime, timedelta import jwt
5
6
from Idap? import Server, Connection, ALL, NTLM, SUBTREE, ALL_ATTRIBUTES
7
8
9
from fastapi import Depends, HTTPException, status from fastapi security import Auth2PasswordBearer, HTTPBearer, HTTPAuthorizationCredentials
10
11
12
13
14
from app.utils.concurrency.concurrency import run_in_thread from app.models.database.db_manager import TeradataManager from app.core.config import settings teradata_manager - TeradataManager ()
15
16
17
oauth2_scheme = OAuth2PasswordBearer (tokenUrl="/auth/login")
Rohit11 KUMAR, 3 weeks ago • Add
18
security - HTTPBearer (
19
20
21
22
23
credentials_exception - HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials", headers={"WwW-Authenticate": "Bearer"},
)
class AuthService:
27
def _init_(self):
29
self-manager_dn - settings.LDAP_BIND_USER_DN
30
self-manager_password - settings. LDAP_BIND_USER_PASSWORD
31
self.user_filter - settings.SECURITY_LDAP_USER_FILTER
32
self.user_base = se*.•
33
34
self.user _dn = sett (variable) settings: Settings
self.service_ous = settings.SERVICE_OU
35
36
async def_user_exists(self, username: str) -> bool:
37
try:
38
39
40
41
42
query = f"SELECT COUNT(*) FROM US_USER PROFILE WHERE ID -{int (username)}*
result = await teradata_manager. execute_query_async (query)
return len (result[0]) > 0
except Exception as e:
return False
43
44
45
46
def
_ldap_auth(self, username: str, password: str) -> bool:
user_dn= 'HBEU\\'+username
try:
47
48
manager_conn=Connection(self.ldap_server, authentication=NTLM, user=user_dn, password-password, auto_bind-True)
49
try:
50
51
52
53
54
55
def try_bind():
manager_conn. search
search_base self.user_base, search_filter-self.user_filter % (username), search_scope-SUBTREE, attributes=ALL_ATTRIBUTES,
)
def _1dap_auth(self, username:
str, password: str) -› bool:
def try_bind():
58
59
manager_conn. unbind()
60
try:
61
62
63
64
65
66
67
68
69
try_bind()
return True
except Exception:
pass
return False
finally:
manager_conn.unbind()
except Exception:
return False
70
71
72
73
74
async def authenticate(self, username: str, password: str) -› str:
exists - await run_in_thread(self. _user_exists, username) if not exists:
raise ValueError ("invalid user")
75
76
77
ok - await run_in_thread(self._ldap_auth, username, password)
if not ok:
78
raise ValueError("invalid_credentials")
79
80
81
82
83
84
expire - datetime.utenow() + timedelta(minutes=int(settings.ACCESS_TOKEN_EXPIRE_MINUTES))
token - jwt. encode(
("sub": username, "exp": expire}, settings-SECRET_KEY, algorithm=settings.ALGORITHM,
)
return token

async def get_current_user (credentials: HTTPAuthorizationCredentials = Depends (security)) -> str:
try:
token - credentials.credentials
payload = jwt.decode(
token, settings. SECRET_KEY,
algorithms=[settings.ALGORITHM],
username: str = payload-get ("sub")
if not username:
raise credentials_exception
except JWTError:
raise credentials_exception except jwt.ExpiredSignatureError:
return credentials_exception
except jwt.InvalidTokenError:
return credentials_exception
return username
